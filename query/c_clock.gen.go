// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"funtour/model"
)

func newClock(db *gorm.DB) clock {
	_clock := clock{}

	_clock.clockDo.UseDB(db)
	_clock.clockDo.UseModel(&model.Clock{})

	tableName := _clock.clockDo.TableName()
	_clock.ALL = field.NewField(tableName, "*")
	_clock.ID = field.NewInt64(tableName, "id")
	_clock.UserID = field.NewString(tableName, "user_id")
	_clock.SightID = field.NewString(tableName, "sight_id")
	_clock.SightName = field.NewString(tableName, "sight_name")
	_clock.RegionID = field.NewString(tableName, "region_id")
	_clock.RegionName = field.NewString(tableName, "region_name")
	_clock.Images = field.NewString(tableName, "images")
	_clock.Comment = field.NewString(tableName, "comment")
	_clock.CreateTime = field.NewTime(tableName, "create_time")
	_clock.UpdateTime = field.NewTime(tableName, "update_time")

	_clock.fillFieldMap()

	return _clock
}

type clock struct {
	clockDo clockDo

	ALL        field.Field
	ID         field.Int64
	UserID     field.String
	SightID    field.String
	SightName  field.String
	RegionID   field.String
	RegionName field.String
	Images     field.String
	Comment    field.String
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (c clock) Table(newTableName string) *clock {
	c.clockDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c clock) As(alias string) *clock {
	c.clockDo.DO = *(c.clockDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *clock) updateTableName(table string) *clock {
	c.ALL = field.NewField(table, "*")
	c.ID = field.NewInt64(table, "id")
	c.UserID = field.NewString(table, "user_id")
	c.SightID = field.NewString(table, "sight_id")
	c.SightName = field.NewString(table, "sight_name")
	c.RegionID = field.NewString(table, "region_id")
	c.RegionName = field.NewString(table, "region_name")
	c.Images = field.NewString(table, "images")
	c.Comment = field.NewString(table, "comment")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")

	c.fillFieldMap()

	return c
}

func (c *clock) WithContext(ctx context.Context) *clockDo { return c.clockDo.WithContext(ctx) }

func (c clock) TableName() string { return c.clockDo.TableName() }

func (c clock) Alias() string { return c.clockDo.Alias() }

func (c *clock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *clock) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["sight_id"] = c.SightID
	c.fieldMap["sight_name"] = c.SightName
	c.fieldMap["region_id"] = c.RegionID
	c.fieldMap["region_name"] = c.RegionName
	c.fieldMap["images"] = c.Images
	c.fieldMap["comment"] = c.Comment
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
}

func (c clock) clone(db *gorm.DB) clock {
	c.clockDo.ReplaceDB(db)
	return c
}

type clockDo struct{ gen.DO }

func (c clockDo) Debug() *clockDo {
	return c.withDO(c.DO.Debug())
}

func (c clockDo) WithContext(ctx context.Context) *clockDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c clockDo) Clauses(conds ...clause.Expression) *clockDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c clockDo) Returning(value interface{}, columns ...string) *clockDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c clockDo) Not(conds ...gen.Condition) *clockDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c clockDo) Or(conds ...gen.Condition) *clockDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c clockDo) Select(conds ...field.Expr) *clockDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c clockDo) Where(conds ...gen.Condition) *clockDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c clockDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *clockDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c clockDo) Order(conds ...field.Expr) *clockDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c clockDo) Distinct(cols ...field.Expr) *clockDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c clockDo) Omit(cols ...field.Expr) *clockDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c clockDo) Join(table schema.Tabler, on ...field.Expr) *clockDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c clockDo) LeftJoin(table schema.Tabler, on ...field.Expr) *clockDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c clockDo) RightJoin(table schema.Tabler, on ...field.Expr) *clockDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c clockDo) Group(cols ...field.Expr) *clockDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c clockDo) Having(conds ...gen.Condition) *clockDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c clockDo) Limit(limit int) *clockDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c clockDo) Offset(offset int) *clockDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c clockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *clockDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c clockDo) Unscoped() *clockDo {
	return c.withDO(c.DO.Unscoped())
}

func (c clockDo) Create(values ...*model.Clock) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c clockDo) CreateInBatches(values []*model.Clock, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c clockDo) Save(values ...*model.Clock) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c clockDo) First() (*model.Clock, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Clock), nil
	}
}

func (c clockDo) Take() (*model.Clock, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Clock), nil
	}
}

func (c clockDo) Last() (*model.Clock, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Clock), nil
	}
}

func (c clockDo) Find() ([]*model.Clock, error) {
	result, err := c.DO.Find()
	return result.([]*model.Clock), err
}

func (c clockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Clock, err error) {
	buf := make([]*model.Clock, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c clockDo) FindInBatches(result *[]*model.Clock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c clockDo) Attrs(attrs ...field.AssignExpr) *clockDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c clockDo) Assign(attrs ...field.AssignExpr) *clockDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c clockDo) Joins(fields ...field.RelationField) *clockDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c clockDo) Preload(fields ...field.RelationField) *clockDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c clockDo) FirstOrInit() (*model.Clock, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Clock), nil
	}
}

func (c clockDo) FirstOrCreate() (*model.Clock, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Clock), nil
	}
}

func (c clockDo) FindByPage(offset int, limit int) (result []*model.Clock, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c clockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c *clockDo) withDO(do gen.Dao) *clockDo {
	c.DO = *do.(*gen.DO)
	return c
}
